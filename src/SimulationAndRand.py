import random
import math

def random_mixed_congruential_generator(a, c, m, x_zero, upper_bound):
    """Calculates all the numbers generated by a mixed congruential random number
    generators.
    param: a is a constant
    param: c is a constant
    param: m is the modulo
    param: x_zero is the seed
    param: is an upper bound for the cycle
    returns a list of all numbers generated"""
    numbers_generated = []
    it = 0
    current_x = x_zero
    while it <= upper_bound:
        next_x = (a * current_x + c) % m
        numbers_generated.append(next_x)
        if next_x == x_zero:
            break
        current_x = next_x
        it += 1
    return numbers_generated


def uniform_random_from_mixed_congruential_generator(a, c, m, x_zero, upper_bound):
    """Calculates all the numbers generated by a mixed congruential random number
    generators and divides them by the modulo to get a uniform distribution.
    param: a is a constant
    param: c is a constant
    param: m is the modulo
    param: x_zero is the seed
    param: is an upper bound for the cycle
    returns a list of all numbers generated"""
    numbers_generated = []
    it = 0
    current_x = x_zero
    while it <= upper_bound:
        next_x = (a * current_x + c) % m
        numbers_generated.append((next_x + (1 / 2)) / m)
        if next_x == x_zero:
            break
        current_x = next_x
        it += 1
    return numbers_generated


"""
    Example:
    a = 10
    b = 20
    m = 1.0/50.0 * (20.0 - 10.0)
    function = "1.0/50.0 * (x - 10.0)"
    print(generate_acceptance_rejection(m, a, b, function, 100))
"""
def generate_acceptance_rejection(m, a, b, function, upper_limit):
    """ Calculates a random observation from a function that has a range [a,b]
    using the acceptance
    rejection method
    param: m is the highest image of the funcion
    param: a is a constant
    param: b is a constant
    param: function is the desired function written as a string
    param: upper_limit the amount of times the simulation is run
    returns the random image generated"""
    for i in range (0, upper_limit):
        first_random = random.uniform(0, 1)
        second_random = random.uniform(0, 1)
        x = a + (b - a) * first_random
        evaluation_image = eval(function)
        if (second_random <= evaluation_image / m):
            print("The evaluation image was found correctly")
            break
    print("First random " + str(first_random))
    print("Second random " + str(second_random))
    return evaluation_image